package org.practise;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.node.ArrayNode;
import com.fasterxml.jackson.databind.node.ObjectNode;
import org.testng.annotations.DataProvider;
import org.testng.annotations.Test;

import static io.restassured.RestAssured.given;
import static io.restassured.RestAssured.responseSpecification;
import static org.hamcrest.MatcherAssert.assertThat;
import static org.hamcrest.Matchers.equalTo;
import static org.hamcrest.Matchers.matchesPattern;

public class PractiseClass13 {



    @Test(enabled = false)
    public void serialize_json_using_jackson() throws JsonProcessingException {

        ObjectMapper objectMapper = new ObjectMapper();

        ObjectNode nestedObjectNode = objectMapper.createObjectNode();
        nestedObjectNode.put("name", "myWorkspace3");
        nestedObjectNode.put("type", "personal");
        nestedObjectNode.put("description", "Rest Assured created this");

        ObjectNode mainObjectNode = objectMapper.createObjectNode();
        mainObjectNode.set("workspace", nestedObjectNode);

        String mainObjectStr = objectMapper.writeValueAsString(mainObjectNode);

//        given()
//                .body(mainObjectNode)
//        .when()
//                .post("/workspaces")
//        .then()
//                .spec(responseSpecification)
//                .assertThat()
//                .body("workspace.name", equalTo("myWorkspace3"))
//                .body("workspace.id", matchesPattern("^[a-z0-9-]{36}$"));


        System.out.println(mainObjectNode);
    }

    @Test
    public void serialize_json_array_using_jackson() throws JsonProcessingException {


        ObjectMapper objectMapper = new ObjectMapper();
        ArrayNode arrayNodeList = objectMapper.createArrayNode();

        ObjectNode obj5001Node = objectMapper.createObjectNode();
        obj5001Node.put("id", "5001");
        obj5001Node.put("type", "None");

        ObjectNode obj5002Node = objectMapper.createObjectNode();
        obj5002Node.put("id", "5002");
        obj5002Node.put("type", "Glazed");

        arrayNodeList.add(obj5001Node);
        arrayNodeList.add(obj5002Node);

        String jsonListStr = objectMapper.writeValueAsString(arrayNodeList);

//        given()
//                .body(jsonListStr)
//                .when()
//                .post("/post")
//                .then()
//                .spec(customResponseSpecification)
//                .assertThat()
//                .body("msg", equalTo("Success"));

        System.out.println(jsonListStr);
    }

    @DataProvider(name = "workspace")
    public Object[][] getWorkspace() {
        return new Object[][]{
                {"myWorkspace5", "personal", "description"},
                {"myWorkspace6", "team", "description"}
                // Since we have two entries we will execute below test case twice
        };
    }

    @Test(dataProvider = "workspace")
    public void workspace_serialize_deserialize(String name, String type, String description) {


        Workspace workspace = new Workspace(name, type, description);
        WorkspaceRoot workspaceRoot = new WorkspaceRoot(workspace);

        WorkspaceRoot deserializedWorkspaceRoot = given()
                .body(workspaceRoot)
                .when()
                .post("/workspaces")
                .then()
                .spec(responseSpecification)
                .extract()
                .response()
                .as(WorkspaceRoot.class);

        assertThat(deserializedWorkspaceRoot.getWorkspace().getName(),
        equalTo(workspaceRoot.getWorkspace().getName()));
        assertThat(deserializedWorkspaceRoot.getWorkspace().getId(), matchesPattern("^[a-z0-9-]{36}$"));

    }

    class Workspace {
        private String name;
        private String type;
        private String description;
        private String id; // Assuming an ID is generated by the API and needs to be deserialized

        // Constructor
        public Workspace(String name, String type, String description) {
            this.name = name;
            this.type = type;
            this.description = description;
        }

        // Getters and Setters (required for serialization/deserialization by Jackson/Gson)
        public String getName() {
            return name;
        }

        public void setName(String name) {
            this.name = name;
        }

        public String getType() {
            return type;
        }

        public void setType(String type) {
            this.type = type;
        }

        public String getDescription() {
            return description;
        }

        public void setDescription(String description) {
            this.description = description;
        }

        public String getId() {
            return id;
        }

        public void setId(String id) {
            this.id = id;
        }
    }

    class WorkspaceRoot {
        private Workspace workspace;

        // Constructor
        public WorkspaceRoot(Workspace workspace) {
            this.workspace = workspace;
        }

        // Getters and Setters
        public Workspace getWorkspace() {
            return workspace;
        }

        public void setWorkspace(Workspace workspace) {
            this.workspace = workspace;
        }
    }
}


